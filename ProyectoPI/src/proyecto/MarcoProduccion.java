/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package proyecto;

import java.util.ArrayList;
import javax.swing.DefaultComboBoxModel;
import javax.swing.table.DefaultTableModel;
import modelo.ProductosManufactura;
import modelo.ProductosManufacturaDAO;

/**
 *
 * @author MIGUEL ANGEL
 */
public class MarcoProduccion extends javax.swing.JFrame
{

    ProductosManufacturaDAO productosDAO = new ProductosManufacturaDAO();
    String[] productosAProducir = null;

    ArrayList<String> productosTerminados = productosDAO.getListaProductos();
    ArrayList<String> materiaPrimaAModificar = new ArrayList<>();

    /**
     * Creates new form MarcoProduccion
     */
    public MarcoProduccion()
    {

        productosDAO.cargarProductos();

        productosAProducir = new String[productosTerminados.size()];
        productosAProducir = productosTerminados.toArray(productosAProducir);        
        initComponents();
        jComboBoxItem.requestFocus();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTableInventario = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jButtonFabricar = new javax.swing.JButton();
        jComboBoxItem = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTableInventario.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {

            },
            new String []
            {
                "Codigo", "Nombre", "Cantidad Inventario", "Cantidad Resultante"
            }
        ));
        jScrollPane1.setViewportView(jTableInventario);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Producto a Fabricar"));

        jButtonFabricar.setText("Fabricar 10");
        jButtonFabricar.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButtonFabricarActionPerformed(evt);
            }
        });

        jComboBoxItem.setModel(new DefaultComboBoxModel<String>(productosAProducir));
        jComboBoxItem.addFocusListener(new java.awt.event.FocusAdapter()
        {
            public void focusGained(java.awt.event.FocusEvent evt)
            {
                jComboBoxItemFocusGained(evt);
            }
        });
        jComboBoxItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jComboBoxItemActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addComponent(jComboBoxItem, javax.swing.GroupLayout.PREFERRED_SIZE, 388, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 78, Short.MAX_VALUE)
                .addComponent(jButtonFabricar, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonFabricar, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxItem, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 291, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBoxItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jComboBoxItemActionPerformed
    {//GEN-HEADEREND:event_jComboBoxItemActionPerformed
        // Item seleccionado (Cargar tabla)
        productosDAO.vaciarArrays();
        productosDAO.cargarMateriaPrima();

        cargarInventario(productosDAO.getProductosInventario());
    }//GEN-LAST:event_jComboBoxItemActionPerformed

    private void jComboBoxItemFocusGained(java.awt.event.FocusEvent evt)//GEN-FIRST:event_jComboBoxItemFocusGained
    {//GEN-HEADEREND:event_jComboBoxItemFocusGained
        // TODO add your handling code here:
        productosDAO.vaciarArrays();
        productosDAO.cargarMateriaPrima();

        cargarInventario(productosDAO.getProductosInventario());
    }//GEN-LAST:event_jComboBoxItemFocusGained

    private void jButtonFabricarActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonFabricarActionPerformed
    {//GEN-HEADEREND:event_jButtonFabricarActionPerformed
        // (Modificar bd según ítem)(idea: array con ítems a modificar como parámetro de DAO)
        materiaPrimaAModificar.clear();
        if (String.valueOf(jComboBoxItem.getSelectedItem()).equalsIgnoreCase("café"))
        {
            materiaPrimaAModificar.add("Café");
            materiaPrimaAModificar.add("Azucar");

        } else if (String.valueOf(jComboBoxItem.getSelectedItem()).equalsIgnoreCase("churros"))
        {
            materiaPrimaAModificar.add("Harina");
            materiaPrimaAModificar.add("Azucar");
        } else if (String.valueOf(jComboBoxItem.getSelectedItem()).equalsIgnoreCase("dedos"))
        {
            materiaPrimaAModificar.add("Harina");
            materiaPrimaAModificar.add("Huevos");
            materiaPrimaAModificar.add("Queso");
        } else if (String.valueOf(jComboBoxItem.getSelectedItem()).equalsIgnoreCase("empanadas"))
        {
            materiaPrimaAModificar.add("Harina");
            materiaPrimaAModificar.add("Huevos");
            materiaPrimaAModificar.add("Carne");
            materiaPrimaAModificar.add("Papa");
        } else if (String.valueOf(jComboBoxItem.getSelectedItem()).equalsIgnoreCase("hojaldras"))
        {
            materiaPrimaAModificar.add("Harina");
            materiaPrimaAModificar.add("Huevos");
        } else if (String.valueOf(jComboBoxItem.getSelectedItem()).equalsIgnoreCase("jugo de naranja"))
        {
            materiaPrimaAModificar.add("Naranja");

        } else if (String.valueOf(jComboBoxItem.getSelectedItem()).equalsIgnoreCase("papas rellenas"))
        {
            materiaPrimaAModificar.add("Harina");
            materiaPrimaAModificar.add("Huevos");
            materiaPrimaAModificar.add("Carne");
            materiaPrimaAModificar.add("Papa");
            materiaPrimaAModificar.add("Arroz");
        } else if (String.valueOf(jComboBoxItem.getSelectedItem()).equalsIgnoreCase("pasteles de carne"))
        {
            materiaPrimaAModificar.add("Harina");
            materiaPrimaAModificar.add("Huevos");
            materiaPrimaAModificar.add("Carne");
        } else if (String.valueOf(jComboBoxItem.getSelectedItem()).equalsIgnoreCase("pasteles de pollo"))
        {
            materiaPrimaAModificar.add("Harina");
            materiaPrimaAModificar.add("Huevos");
            materiaPrimaAModificar.add("Pollo");
        }

        productosDAO.actualizarBD(materiaPrimaAModificar, String.valueOf(jComboBoxItem.getSelectedItem()));
        jComboBoxItem.requestFocus();
    }//GEN-LAST:event_jButtonFabricarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Nimbus".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(MarcoProduccion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(MarcoProduccion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(MarcoProduccion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(MarcoProduccion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                new MarcoProduccion().setVisible(false);
            }
        });
    }

    public void limpiarTabla()
    {
        DefaultTableModel modelo;
        modelo = (DefaultTableModel) jTableInventario.getModel();
        for (int i = modelo.getRowCount() - 1; i >= 0; i--)
        {
            modelo.removeRow(i);
        }
    }

    public void cargarInventario(ArrayList<ProductosManufactura> producto)
    {
        DefaultTableModel modelo;
        modelo = (DefaultTableModel) jTableInventario.getModel();
        limpiarTabla();
        for (int i = 0; i < producto.size(); i++)
        {
            if (String.valueOf(jComboBoxItem.getSelectedItem()).equalsIgnoreCase("café"))
            {
                if (producto.get(i).getNombre().equalsIgnoreCase("Café"))
                {
                    modelo.addRow(new Object[]
                    {
                        producto.get(i).getId(),
                        producto.get(i).getNombre(),
                        producto.get(i).getCantidadDisponible(),
                        producto.get(i).getCantidadDisponible() - 1,
                    });
                } else if (producto.get(i).getNombre().equalsIgnoreCase("Azucar"))
                {
                    modelo.addRow(new Object[]
                    {
                        producto.get(i).getId(),
                        producto.get(i).getNombre(),
                        producto.get(i).getCantidadDisponible(),
                        producto.get(i).getCantidadDisponible() - 1,
                    });
                }

            } else if (String.valueOf(jComboBoxItem.getSelectedItem()).equalsIgnoreCase("churros"))
            {
                if (producto.get(i).getNombre().equalsIgnoreCase("Harina"))
                {
                    modelo.addRow(new Object[]
                    {
                        producto.get(i).getId(),
                        producto.get(i).getNombre(),
                        producto.get(i).getCantidadDisponible(),
                        producto.get(i).getCantidadDisponible() - 1,
                    });
                } else if (producto.get(i).getNombre().equalsIgnoreCase("Azucar"))
                {
                    modelo.addRow(new Object[]
                    {
                        producto.get(i).getId(),
                        producto.get(i).getNombre(),
                        producto.get(i).getCantidadDisponible(),
                        producto.get(i).getCantidadDisponible() - 1,
                    });
                }
            } else if (String.valueOf(jComboBoxItem.getSelectedItem()).equalsIgnoreCase("dedos"))
            {
                if (producto.get(i).getNombre().equalsIgnoreCase("Harina"))
                {
                    modelo.addRow(new Object[]
                    {
                        producto.get(i).getId(),
                        producto.get(i).getNombre(),
                        producto.get(i).getCantidadDisponible(),
                        producto.get(i).getCantidadDisponible() - 1,
                    });
                } else if (producto.get(i).getNombre().equalsIgnoreCase("Huevos"))
                {
                    modelo.addRow(new Object[]
                    {
                        producto.get(i).getId(),
                        producto.get(i).getNombre(),
                        producto.get(i).getCantidadDisponible(),
                        producto.get(i).getCantidadDisponible() - 1,
                    });
                } else if (producto.get(i).getNombre().equalsIgnoreCase("Queso"))
                {
                    modelo.addRow(new Object[]
                    {
                        producto.get(i).getId(),
                        producto.get(i).getNombre(),
                        producto.get(i).getCantidadDisponible(),
                        producto.get(i).getCantidadDisponible() - 1,
                    });
                }
            } else if (String.valueOf(jComboBoxItem.getSelectedItem()).equalsIgnoreCase("empanadas"))
            {
                if (producto.get(i).getNombre().equalsIgnoreCase("Harina"))
                {
                    modelo.addRow(new Object[]
                    {
                        producto.get(i).getId(),
                        producto.get(i).getNombre(),
                        producto.get(i).getCantidadDisponible(),
                        producto.get(i).getCantidadDisponible() - 1,
                    });
                } else if (producto.get(i).getNombre().equalsIgnoreCase("Huevos"))
                {
                    modelo.addRow(new Object[]
                    {
                        producto.get(i).getId(),
                        producto.get(i).getNombre(),
                        producto.get(i).getCantidadDisponible(),
                        producto.get(i).getCantidadDisponible() - 1,
                    });
                } else if (producto.get(i).getNombre().equalsIgnoreCase("Carne"))
                {
                    modelo.addRow(new Object[]
                    {
                        producto.get(i).getId(),
                        producto.get(i).getNombre(),
                        producto.get(i).getCantidadDisponible(),
                        producto.get(i).getCantidadDisponible() - 1,
                    });
                } else if (producto.get(i).getNombre().equalsIgnoreCase("Papa"))
                {
                    modelo.addRow(new Object[]
                    {
                        producto.get(i).getId(),
                        producto.get(i).getNombre(),
                        producto.get(i).getCantidadDisponible(),
                        producto.get(i).getCantidadDisponible() - 1,
                    });
                }
            } else if (String.valueOf(jComboBoxItem.getSelectedItem()).equalsIgnoreCase("hojaldras"))
            {
                if (producto.get(i).getNombre().equalsIgnoreCase("Harina"))
                {
                    modelo.addRow(new Object[]
                    {
                        producto.get(i).getId(),
                        producto.get(i).getNombre(),
                        producto.get(i).getCantidadDisponible(),
                        producto.get(i).getCantidadDisponible() - 1,
                    });
                } else if (producto.get(i).getNombre().equalsIgnoreCase("Huevos"))
                {
                    modelo.addRow(new Object[]
                    {
                        producto.get(i).getId(),
                        producto.get(i).getNombre(),
                        producto.get(i).getCantidadDisponible(),
                        producto.get(i).getCantidadDisponible() - 1,
                    });
                }
            } else if (String.valueOf(jComboBoxItem.getSelectedItem()).equalsIgnoreCase("jugo de naranja"))
            {
                if (producto.get(i).getNombre().equalsIgnoreCase("Naranja"))
                {
                    modelo.addRow(new Object[]
                    {
                        producto.get(i).getId(),
                        producto.get(i).getNombre(),
                        producto.get(i).getCantidadDisponible(),
                        producto.get(i).getCantidadDisponible() - 1,
                    });
                }

            } else if (String.valueOf(jComboBoxItem.getSelectedItem()).equalsIgnoreCase("papas rellenas"))
            {
                if (producto.get(i).getNombre().equalsIgnoreCase("Harina"))
                {
                    modelo.addRow(new Object[]
                    {
                        producto.get(i).getId(),
                        producto.get(i).getNombre(),
                        producto.get(i).getCantidadDisponible(),
                        producto.get(i).getCantidadDisponible() - 1,
                    });
                } else if (producto.get(i).getNombre().equalsIgnoreCase("Huevos"))
                {
                    modelo.addRow(new Object[]
                    {
                        producto.get(i).getId(),
                        producto.get(i).getNombre(),
                        producto.get(i).getCantidadDisponible(),
                        producto.get(i).getCantidadDisponible() - 1,
                    });
                } else if (producto.get(i).getNombre().equalsIgnoreCase("Carne"))
                {
                    modelo.addRow(new Object[]
                    {
                        producto.get(i).getId(),
                        producto.get(i).getNombre(),
                        producto.get(i).getCantidadDisponible(),
                        producto.get(i).getCantidadDisponible() - 1,
                    });
                } else if (producto.get(i).getNombre().equalsIgnoreCase("Papa"))
                {
                    modelo.addRow(new Object[]
                    {
                        producto.get(i).getId(),
                        producto.get(i).getNombre(),
                        producto.get(i).getCantidadDisponible(),
                        producto.get(i).getCantidadDisponible() - 1,
                    });
                } else if (producto.get(i).getNombre().equalsIgnoreCase("Arroz"))
                {
                    modelo.addRow(new Object[]
                    {
                        producto.get(i).getId(),
                        producto.get(i).getNombre(),
                        producto.get(i).getCantidadDisponible(),
                        producto.get(i).getCantidadDisponible() - 1,
                    });
                }
            } else if (String.valueOf(jComboBoxItem.getSelectedItem()).equalsIgnoreCase("pasteles de carne"))
            {
                if (producto.get(i).getNombre().equalsIgnoreCase("Harina"))
                {
                    modelo.addRow(new Object[]
                    {
                        producto.get(i).getId(),
                        producto.get(i).getNombre(),
                        producto.get(i).getCantidadDisponible(),
                        producto.get(i).getCantidadDisponible() - 1,
                    });
                } else if (producto.get(i).getNombre().equalsIgnoreCase("Huevos"))
                {
                    modelo.addRow(new Object[]
                    {
                        producto.get(i).getId(),
                        producto.get(i).getNombre(),
                        producto.get(i).getCantidadDisponible(),
                        producto.get(i).getCantidadDisponible() - 1,
                    });
                } else if (producto.get(i).getNombre().equalsIgnoreCase("Carne"))
                {
                    modelo.addRow(new Object[]
                    {
                        producto.get(i).getId(),
                        producto.get(i).getNombre(),
                        producto.get(i).getCantidadDisponible(),
                        producto.get(i).getCantidadDisponible() - 1,
                    });
                }
            } else if (String.valueOf(jComboBoxItem.getSelectedItem()).equalsIgnoreCase("pasteles de pollo"))
            {
                if (producto.get(i).getNombre().equalsIgnoreCase("Harina"))
                {
                    modelo.addRow(new Object[]
                    {
                        producto.get(i).getId(),
                        producto.get(i).getNombre(),
                        producto.get(i).getCantidadDisponible(),
                        producto.get(i).getCantidadDisponible() - 1,
                    });
                } else if (producto.get(i).getNombre().equalsIgnoreCase("Huevos"))
                {
                    modelo.addRow(new Object[]
                    {
                        producto.get(i).getId(),
                        producto.get(i).getNombre(),
                        producto.get(i).getCantidadDisponible(),
                        producto.get(i).getCantidadDisponible() - 1,
                    });
                } else if (producto.get(i).getNombre().equalsIgnoreCase("Pollo"))
                {
                    modelo.addRow(new Object[]
                    {
                        producto.get(i).getId(),
                        producto.get(i).getNombre(),
                        producto.get(i).getCantidadDisponible(),
                        producto.get(i).getCantidadDisponible() - 1,
                    });
                }

            }
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonFabricar;
    private javax.swing.JComboBox<String> jComboBoxItem;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableInventario;
    // End of variables declaration//GEN-END:variables
}
